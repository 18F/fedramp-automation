# This is a basic workflow to help you get started with Actions

name: Run Schematron Validation

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: 
  workflow_dispatch:
    inputs:
      schematronFileName:
        description: the name of the schematron file (.sch) to validate including the relative path from the root of the repository    
        required: true
      DOC_TO_VALIDATE:
        description: the name of the SSP file (XML) to validate including the relative path from the root of the repository
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job runs schematron validation(s) on the file that is passed in 
  run-schematron-validation:
   # Run on ubuntu
    runs-on: ubuntu-latest

    # Checkout repository and its submodules
    steps:
      # Check-out the repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v2

      - name: Cache
        uses: actions/cache@v2.1.3
        with:
          path: |
            ~/resources/validations/lib/
            ~/oscal/
            /tmp/saxon/
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
        
      # Check-out submodules
      - name: Checkout submodules
        uses: textbook/git-checkout-submodule-action@2.1.1
        with:
          remote: true

      # Install Saxon HE to /tmp
      - name: Install Saxon HE
        run: |
          echo "Installing Saxon"
          mkdir -p /tmp/saxon
          echo "Dowloading Saxon"
          export SAXON_CP=/tmp/saxon/Saxon-HE-10.2.jar
          wget -O "${SAXON_CP}" https://repo1.maven.org/maven2/net/sf/saxon/Saxon-HE/10.2/Saxon-HE-10.2.jar
          echo "saxon_cp is ${SAXON_CP}"
          
      # convert schematron to xsl and validate file with converted xsl
      - name: Convert to XSL
        run: |
          export SAXON_CP=/tmp/saxon/Saxon-HE-10.2.jar
          echo "convert to xsl"
          # compute name without .sch
          qualifiedSchematronName=${{ github.event.inputs.schematronFileName }}
          echo "schematronFileName ${qualifiedSchematronName}"
          echo "DOC_TO_VALIDATE: ${{ github.workspace }}${{ github.event.inputs.DOC_TO_VALIDATE }}"
          schematronName=${qualifiedSchematronName##*/}
          echo "schematronName: ${schematronName}"
          schematronRoot=${schematronName%.*}
          echo "schematronRoot: ${schematronRoot}"
          echo "schematron code ${{ github.workspace }}/resources/validations/lib/schematron/trunk/schematron/code/iso_svrl_for_xslt2.xsl"
          rm -rf ${{ github.workspace }}/resources/validations/target/*.xsl

          java -cp ${SAXON_CP} net.sf.saxon.Transform \
          -o:"${{ github.workspace }}/resources/validations/target/${schematronRoot}".xsl \
          -s:"${{ github.workspace }}/${qualifiedSchematronName}" \
          ${{ github.workspace }}/resources/validations/lib/schematron/trunk/schematron/code/iso_svrl_for_xslt2.xsl \
          allow-foreign=true

          reportName=${{ github.workspace }}/resources/validations/report/schematron${{ github.event.inputs.DOC_TO_VALIDATE }}__${schematronRoot}.results.xml

          echo "delete pre-existing SVRL and HTML results"
          rm -rf "${reportName}" "${htmlReportName}"

          echo "validating doc: ${{ github.event.inputs.DOC_TO_VALIDATE }} with ${qualifiedSchematronName} output found in ${reportName}"
          echo source
          echo `ls -ltr ${{ github.workspace }}${{ github.event.inputs.DOC_TO_VALIDATE }}`

          java -cp "${SAXON_CP}" net.sf.saxon.Transform \
          -o:${reportName} \
          -s:${{ github.workspace }}${{ github.event.inputs.DOC_TO_VALIDATE }} \
          ${{ github.workspace }}/resources/validations/target/${schematronRoot}.xsl \
          allow-foreign=true